#!/usr/bin/perl
#
# Programmer:    Craig Stuart Sapp <craig.stanford.edu>
# Creation Date: Wed Apr 29 12:08:07 PDT 2015
# Last Modified: Wed Apr 29 12:20:42 PDT 2015
# Filename:      makemusicinfo
# Syntax:        perl 5
#
# Description:   Create musical system census, organized
#                into a list of movements.  Give a list of
#                the starting system filename prefixes as input
#                to this program.  For example a four-movement
#                piece might be processed with this program call:
#
#                   ./makemusicinfo h20511 h20521 h20531 h20541
# 
#                Where h20511 is the same prefix to all of the 
#                alphabetically sorted files in the first movement,
#                such as h2051101.svg, h2051102.svg, h2051103.svg, etc.
#
#                The output from this program is inserted as JSON
#                data into the index.html for the demo page.
#

use strict;
my @prefixes = @ARGV;

print "var music = [\n";

for (my $i=0; $i<@prefixes; $i++) {
   my @files = getMovementFiles($prefixes[$i]);
   print "\t[\n";
   for (my $j=0; $j<@files; $j++) {
      my $file = $files[$j];
      printFileInfo($file);
      if ($j<@files-1) {
         print ",\n";
      } else {
         print "\n";
      }
   }

   if ($i < @prefixes-1) {
      print "\t],\n";
   } else {
      print "\t]\n";
   }
}

print "]\n";



##############################
##
## getMovementFiles --
##

sub getMovementFiles {
   my ($prefix) = @_;
   my @output;
   opendir(DIR, ".") or die;
   while (my $file = readdir(DIR)) {
      next if $file =~ /^\./;
      next if -d $file;
      next if $file !~ /^$prefix/;
      next if $file !~ /\.svg$/;
      $output[@output] = $file;
   }
   return sort @output;
}



##############################
##
## printFileInfo --
##

sub printFileInfo {
   my ($file) = @_;
   my $base = $file;
   $base=~ s/\.[^.]*$//;
   my ($width, $height) = getDimensions($file);

   print "\t\t{";
   print "\"base\":\"$base\", \"width\":$width, \"height\":$height}";

}



##############################
##
## getDimensions --
##
##   width="809" height="233">
##

sub getDimensions {
   my ($file) = @_;
   my ($width, $height);
   open (FILE, $file) or die "Cannot read $file\n";
   while (my $line = <FILE>) {
      if ($line =~ /width=\"([^"]+)".*height="([^"]+)"/) {
         $width = $1;
         $height = $2;
         last;
      }
   }
   closedir(DIR);
   return ($width, $height);
}



